#!/bin/bash
set -e # end if anything fails

PROG=mlistd
PROG_PATH=$(which $PROC) || { echo "$PROG missing"; exit 1; }

syslog=/dev/null
syserr=/tmp/mlistd.err

RETVAL=0

. /lib/lsb/init-functions

usage() {
	echo "$0 [options] start|restart|stop"
	echo "  -l <syslog>     DEFAULT: /dev/null"
	echo "  -e <errlog>     DEFAULT: /tmp/xeventhandler.err"
}

start () {

	# check, if process is already running
	if pid_of_proc $pidfile $PROG_PATH >/dev/null
	then
		log_end_msg 1
		exit 1
	fi
	
	log_daemon_msg $PROG || true
	($PROC &) 1>>$syslog 2>>$syserr
	sleep 2
	if status_of_proc $PROG
	then
		log_end_msg 0 || true
	else
	    log_end_msg 1 || true
	fi
}

status() {
	if [ `ps -ef | grep $PROG | grep -v grep | grep -v bash | wc -l` -gt 0 ]
	then
		echo -n $PROG" is running..."
		echo ""
	else
		echo -n $PROG" is stopped"
		echo ""
	fi
}

stop () {
	log_daemon_msg "Stopping $PROG"
	killall $PROG_PATH || true
	return 0
}

# evaluate parameters

operation="NOP"

while [ -n "$1" ]
do
	case "$1" in
	start)
		operation=start
		shift
		;;
	restart)
		operation=restart
		shift
		;;
	stop)
		operation=stop
		shift
		;;
	-c)
		configfile=$2
		shift 2
		;;
	-l)
		syslog=$2
		if [ -f $syslog ]; then rm $syslog; fi
		shift 2
		;;
	-e)
		syserr=$2
		shift 2
		;;
	-h)
		usage
		exit 0
		;;
	*)
		usage
		exit 1
		;;
	esac
done

if [ -f $syserr ]; then rm $syserr; fi

case $operation in
start)
	start
	;;
stop)
	stop
	;;
restart)
	stop
	start
	;;
*)
	usage
	exit 1
	;;
esac

exit 0

